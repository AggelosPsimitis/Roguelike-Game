package Main;

import java.awt.Graphics;
import java.awt.image.BufferStrategy;

import Entities.HumanWarrior;
import Entities.Player;
import Input.KeyManager;
import Main.State.GameState;
import Main.State.Handler;
import Main.State.State;
import Tiles.Tile;

public class Game implements Runnable { // allow Game class to be executed by a thread

	private Display display;
	private int width, height;
	public String title;

	private boolean running = false;
	private Thread thread;

	private BufferStrategy bs;
	private Graphics g;

	// items and enemies to be loaded on each stage;
	private int enemyNum = 10;
	private int healthNum = 10;
	private int manaNum = 10;
	private int equipNum = 10;
	
	private Player player;
	
	// states
	private State gameState;
	
	// Input
	private KeyManager keyManager;

	// Handler
	private Handler handler;

	public Game(String title, int width, int height) {
		this.width = width;
		this.height = height;
		this.title = title;
		keyManager = new KeyManager();
	}

	// initialise the Game
	private void init() {
		display = new Display(title, width, height);
		display.getFrame().addKeyListener(keyManager);

		handler = new Handler(this);

		player = new HumanWarrior(handler, 0.0f, 0.0f, "Aragorn");  // create player
				
		gameState = new GameState(handler, enemyNum, healthNum, manaNum, equipNum);
		State.setState(gameState);
		
		// set player's position (inside the world generated by the current gameState)
		player.setX((float)(handler.getWorld().getStartPoint().getX() * Tile.TILE_WIDTH));
		player.setY((float)(handler.getWorld().getStartPoint().getY() * Tile.TILE_HEIGHT));
	
		player.addObserver(this.getDisplay().getPlayerStatus());
		player.addObserver(this.getDisplay().getGameLog());
	}

	public Player getPlayer() {
		return this.player;
	}
	
	public State getGameState() {
		return this.gameState;
	}
	
	private void update() {
		keyManager.update();
		
		if (State.getState() != null) {
			State.getState().update();
		}
	}

	// draw to screen - need to access the canvas
	private void render() {

		// get how many "hidden" frames are drawn before drawing actual screen
		bs = display.getCanvas().getBufferStrategy();

		// if initially our canvas does not have buffered strategy, create one
		if (bs == null) {
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		// bs is set, get graphics to g object and get ready to draw
		g = bs.getDrawGraphics();
		// Clear the screen
		g.clearRect(0, 0, width, height);
		
		// Draw Here
		if (State.getState() != null) {
			State.getState().render(g);
		}

		// Done drawing, now show it on the screen
		bs.show();

		// don't need g object anymore
		g.dispose();

	}

	public void run() {

		init();

		int fps = 60; // how many times per second frames (update() -> render()) run
		double timePerTick = 1000000000 / fps; // maximum amount of time we have to run update() and render() to achieve
												// 60 fps
		double delta = 0;
		long now;
		long lastTime = System.nanoTime(); // clock in nanoseconds
		long timer = 0;
		int ticks = 0;

		// game loop (update() and render()/draw())
		while (running) {
			now = System.nanoTime();
			delta += (now - lastTime) / timePerTick; // how much time we have to call update() and render() methods
			timer += now - lastTime;
			lastTime = now;
			if (delta >= 1) {
				update();
				render();
				ticks++;
				delta--;
			}

			if (timer >= 1000000000) {
				// System.out.println("Ticks and Frames" + ticks);
				ticks = 0;
				timer = 0;
			}
			
			
			if((int)(player.getX() / Tile.TILE_WIDTH) == (int)State.getState().getWorld().getExitPoint().getX() &&
					(int)(player.getY() / Tile.TILE_HEIGHT) == (int)State.getState().getWorld().getExitPoint().getY()){
						
				State.setState(new GameState(handler, ++enemyNum, --healthNum, --manaNum, --equipNum));
				player.setX((float)(State.getState().getWorld().getStartPoint().getX() * Tile.TILE_WIDTH));
				player.setY((float)(State.getState().getWorld().getStartPoint().getY() * Tile.TILE_HEIGHT));
		
				healthNum--;
				if(healthNum == 0)
					running = false;
			}
			
			
		}

		stop();

	}

	public KeyManager getKeyManager() {
		return keyManager;
	}

	public int getWidth() {
		return width;
	}

	public int getHeight() {
		return height;
	}

	// synchronised used when threads are used manually to avoid interference
	public synchronized void start() {
		if (running) {
			return;
		}
		running = true;
		// create a new thread that runs the Game class
		thread = new Thread(this);
		// call run() method
		thread.start();

	}

	public synchronized void stop() {
		if (!running) {
			return;
		}
		running = false;
		// stop threads safely (wait) for all threads to finish
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public Thread getThread() {
		return this.thread;
	}

	public Display getDisplay() {
		return this.display;
	}
}
